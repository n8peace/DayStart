name: Deploy to Development

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

jobs:
  deploy-develop:
    name: Deploy to Development
    runs-on: ubuntu-latest
    environment: develop
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Validate environment variables
      run: |
        echo "üîç Validating development environment variables..."
        
        # Check each secret directly
        if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_URL"
          exit 1
        else
          echo "‚úÖ SUPABASE_URL is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_SERVICE_ROLE_KEY"
          exit 1
        else
          echo "‚úÖ SUPABASE_SERVICE_ROLE_KEY is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_DEVELOP_PROJECT }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_DEVELOP_PROJECT"
          exit 1
        else
          echo "‚úÖ SUPABASE_DEVELOP_PROJECT is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_ACCESS_TOKEN }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_ACCESS_TOKEN"
          exit 1
        else
          echo "‚úÖ SUPABASE_ACCESS_TOKEN is set"
        fi
        
        # Note: SUPABASE_DB_PASSWORD not required when using API deployment
        echo "‚ÑπÔ∏è Using API-based deployment (no direct database connection required)"
        
        echo "‚úÖ All required environment variables are set"
        
    - name: Link to development project
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Linking to development project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
        supabase link --project-ref ${{ secrets.SUPABASE_DEVELOP_PROJECT }}
        
        # Verify the link was successful
        echo "Verifying project link..."
        supabase projects list
        
    - name: Deploy database migrations
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Deploying database migrations to development..."
        echo "Using Supabase API for migration deployment..."
        
        # Check if we have migrations to deploy
        if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
          echo "Found migrations to deploy:"
          ls -la migrations/
          
          # Deploy using linked project approach
          echo "Attempting to deploy migrations to linked project..."
          if ! supabase db push --linked; then
            echo "‚ö†Ô∏è Migration deployment failed"
            echo "This may be due to network restrictions in CI/CD environment"
            echo "Please run migrations manually in the Supabase Dashboard:"
            echo "1. Go to https://supabase.com/dashboard/project/${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
            echo "2. Navigate to SQL Editor"
            echo "3. Run the migration SQL manually"
            echo "Migration files to run:"
            ls -la migrations/
            exit 0  # Don't fail the workflow, just warn
          fi
        else
          echo "‚ö†Ô∏è No migrations found to deploy"
        fi
        
    - name: Deploy Edge Functions
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Deploying edge functions to development..."
        # Only deploy if functions have content
        if [ -s "functions/generate-message/index.ts" ] || [ -s "functions/test-voice/index.ts" ]; then
          supabase functions deploy
        else
          echo "‚ö†Ô∏è No functions to deploy - function files are empty"
        fi
        
    - name: Run health checks
      run: |
        echo "üè• Running health checks..."
        
        # Check if functions have content before testing them
        if [ -s "supabase/functions/generate-message/index.ts" ]; then
          echo "Testing generate-message function..."
          response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/functions/v1/generate-message \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}")
          
          http_code=$(echo "$response" | tail -n1)
          if [ "$http_code" = "200" ]; then
            echo "‚úÖ generate-message function is healthy"
          else
            echo "‚ùå generate-message function health check failed (HTTP $http_code)"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è generate-message function not tested - file is empty"
        fi
        
        if [ -s "supabase/functions/test-voice/index.ts" ]; then
          echo "Testing test-voice function..."
          response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/functions/v1/test-voice \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}")
          
          http_code=$(echo "$response" | tail -n1)
          if [ "$http_code" = "200" ]; then
            echo "‚úÖ test-voice function is healthy"
          else
            echo "‚ùå test-voice function health check failed (HTTP $http_code)"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è test-voice function not tested - file is empty"
        fi
        
        # Test database connectivity (optional - may fail if migrations not run yet)
        echo "Testing database connectivity..."
        response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/rest/v1/users?select=count \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
          -H "Content-Type: application/json")
        
        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Database connectivity is healthy"
        elif [ "$http_code" = "401" ]; then
          echo "‚ö†Ô∏è Database connectivity check failed (HTTP 401) - likely due to empty database or missing migrations"
          echo "This is expected for a fresh development deployment"
        else
          echo "‚ö†Ô∏è Database connectivity check failed (HTTP $http_code) - but continuing deployment"
          echo "This may be due to empty database or missing migrations"
        fi
        
    - name: Verify deployment status
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        echo "Verifying development deployment..."
        
        # Check if we can access the Supabase API
        echo "Testing Supabase API connectivity..."
        response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/rest/v1/ \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
          -H "Content-Type: application/json")
        
        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Supabase API is accessible"
        else
          echo "‚ö†Ô∏è Supabase API connectivity check failed (HTTP $http_code)"
          echo "This may be normal for a fresh deployment"
        fi
        
        # Check migration status via API
        echo "Checking migration status..."
        cd supabase
        if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
          echo "‚úÖ Migrations directory contains files"
          ls -la migrations/
        else
          echo "‚ö†Ô∏è No migrations found"
        fi
        
        echo "‚úÖ Deployment verification complete"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Successfully deployed to development!"
        echo "Project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
        echo "Deployment time: $(date)"
        echo "Commit: ${{ github.sha }}"
        echo "Supabase URL: ${{ secrets.SUPABASE_URL }}"
        
  deployment-failed:
    name: Development Deployment Failed
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "‚ùå Development deployment failed!"
        echo "Please check the logs and fix any issues before retrying."
        echo "Project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
        echo "Commit: ${{ github.sha }}"
        echo "Supabase URL: ${{ secrets.SUPABASE_URL }}"
        
    - name: Rollback guidance
      run: |
        echo "üîÑ Rollback guidance:"
        echo "1. Check Supabase dashboard for deployment status"
        echo "2. Review function logs for errors"
        echo "3. Verify environment variables are correctly set"
        echo "4. Check database migration status"
        echo "5. Manual rollback may be required via Supabase dashboard" 