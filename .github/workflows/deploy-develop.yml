name: Deploy to Development

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

jobs:
  deploy-develop:
    name: Deploy to Development
    runs-on: ubuntu-latest
    environment: develop
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Validate environment variables
      run: |
        echo "üîç Validating development environment variables..."
        
        # Check each secret directly
        if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_URL"
          exit 1
        else
          echo "‚úÖ SUPABASE_URL is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_SERVICE_ROLE_KEY"
          exit 1
        else
          echo "‚úÖ SUPABASE_SERVICE_ROLE_KEY is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_DEVELOP_PROJECT }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_DEVELOP_PROJECT"
          exit 1
        else
          echo "‚úÖ SUPABASE_DEVELOP_PROJECT is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_ACCESS_TOKEN }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_ACCESS_TOKEN"
          exit 1
        else
          echo "‚úÖ SUPABASE_ACCESS_TOKEN is set"
        fi
        
        echo "‚úÖ All required environment variables are set"
        
    - name: Link to development project
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Linking to development project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
        supabase link --project-ref ${{ secrets.SUPABASE_DEVELOP_PROJECT }}
        
    - name: Deploy database migrations
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Deploying database migrations to development..."
        
        # Enhanced network diagnostics from ci.yml
        echo "üîç Checking if database URL is available..."
        if [ -z "${{ secrets.SUPABASE_DEVELOP_DB_URL }}" ]; then
          echo "‚ö†Ô∏è SUPABASE_DEVELOP_DB_URL secret is not set - using linked project approach"
          echo "Deploying using linked project..."
          supabase db push
        else
          echo "‚úÖ Database URL is available"
          
          echo "üåê Forcing IPv4 connections..."
          export GODEBUG=netdns=go
          
          echo "üîç Testing network connectivity..."
          echo "Database URL format: $(echo ${{ secrets.SUPABASE_DEVELOP_DB_URL }} | cut -d'@' -f2 | cut -d'/' -f1)"
          echo "üîç Full database URL (masked): $(echo ${{ secrets.SUPABASE_DEVELOP_DB_URL }} | sed 's/:[^:@]*@/@***@/')"
          
          # Test basic connectivity to Supabase
          echo "üîç Testing basic connectivity to Supabase..."
          HOST=$(echo ${{ secrets.SUPABASE_DEVELOP_DB_URL }} | sed -n 's/.*@\([^:]*\):.*/\1/p')
          echo "Testing connection to: $HOST:6543"
          if timeout 10 nc -zv $HOST 6543 2>/dev/null; then
            echo "‚úÖ Port 6543 is reachable"
          else
            echo "‚ö†Ô∏è  Port 6543 connection test failed (this might be normal)"
          fi
          
          echo "üîç Checking database URL format..."
          DB_URL="${{ secrets.SUPABASE_DEVELOP_DB_URL }}"
          if [[ "$DB_URL" == *"aws-0-us-west-1.pooler.supabase.com"* ]]; then
            echo "‚ùå Using dedicated pooler (IPv6 only - not compatible with GitHub Actions)"
            echo "üìã Please use connection pooling instead of dedicated pooler"
          elif [[ "$DB_URL" == *".supabase.co:6543"* ]]; then
            echo "‚úÖ Using connection pooling (IPv4 compatible)"
          elif [[ "$DB_URL" == *"db."*".supabase.co:5432"* ]]; then
            echo "‚ö†Ô∏è  Using old direct format (may not work)"
          else
            echo "‚ùì Unknown database URL format"
          fi
          
          echo "Deploying database migrations using direct database URL..."
          echo "üîß Using extended timeout and retry settings..."
          if timeout 120 supabase db push --db-url ${{ secrets.SUPABASE_DEVELOP_DB_URL }} --dns-resolver https --debug; then
            echo "‚úÖ Database migrations deployed successfully"
          else
            echo "‚ùå CLI deployment failed with direct URL"
            echo "üîç Trying alternative URL format..."
            
            # Try to construct correct URL format
            if [[ "$DB_URL" == *"aws-0-us-west-1.pooler.supabase.com"* ]]; then
              echo "üîÑ Converting to connection pooling format..."
              # Extract project ref from dedicated pooler format
              PROJECT_REF=$(echo "$DB_URL" | sed -n 's/.*postgres\.\([^:]*\):.*/\1/p')
              if [ -n "$PROJECT_REF" ]; then
                echo "üìã Project reference: $PROJECT_REF"
                echo "üìã Please update your SUPABASE_DEVELOP_DB_URL secret to use connection pooling:"
                echo "üìã postgresql://postgres.$PROJECT_REF:[PASSWORD]@$PROJECT_REF.supabase.co:6543/postgres"
              fi
            elif [[ "$DB_URL" == *"db."*".supabase.co"* ]]; then
              echo "üîÑ Converting to connection pooling format..."
              # Extract project ref from old format
              PROJECT_REF=$(echo "$DB_URL" | sed -n 's/.*@db\.\([^.]*\)\.supabase\.co.*/\1/p')
              if [ -n "$PROJECT_REF" ]; then
                echo "üìã Project reference: $PROJECT_REF"
                echo "üìã Please update your SUPABASE_DEVELOP_DB_URL secret to use connection pooling:"
                echo "üìã postgresql://postgres.$PROJECT_REF:[PASSWORD]@$PROJECT_REF.supabase.co:6543/postgres"
              fi
            fi
            
            echo "üìã Manual deployment required - check Supabase Dashboard"
            echo "üîó Project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
            exit 1
          fi
        fi
        
    - name: Deploy Edge Functions
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Deploying edge functions to development..."
        # Only deploy if functions have content
        if [ -s "functions/generate-message/index.ts" ] || [ -s "functions/test-voice/index.ts" ]; then
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_DEVELOP_PROJECT }}
        else
          echo "‚ö†Ô∏è No functions to deploy - function files are empty"
        fi
        
    - name: Run health checks
      run: |
        echo "üè• Running health checks..."
        
        # Check if functions have content before testing them
        if [ -s "supabase/functions/generate-message/index.ts" ]; then
          echo "Testing generate-message function..."
          response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/functions/v1/generate-message \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}")
          
          http_code=$(echo "$response" | tail -n1)
          if [ "$http_code" = "200" ]; then
            echo "‚úÖ generate-message function is healthy"
          else
            echo "‚ùå generate-message function health check failed (HTTP $http_code)"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è generate-message function not tested - file is empty"
        fi
        
        if [ -s "supabase/functions/test-voice/index.ts" ]; then
          echo "Testing test-voice function..."
          response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/functions/v1/test-voice \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}")
          
          http_code=$(echo "$response" | tail -n1)
          if [ "$http_code" = "200" ]; then
            echo "‚úÖ test-voice function is healthy"
          else
            echo "‚ùå test-voice function health check failed (HTTP $http_code)"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è test-voice function not tested - file is empty"
        fi
        
        # Test database connectivity (optional - may fail if migrations not run yet)
        echo "Testing database connectivity..."
        response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/rest/v1/users?select=count \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
          -H "Content-Type: application/json")
        
        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Database connectivity is healthy"
        elif [ "$http_code" = "401" ]; then
          echo "‚ö†Ô∏è Database connectivity check failed (HTTP 401) - likely due to empty database or missing migrations"
          echo "This is expected for a fresh development deployment"
        else
          echo "‚ö†Ô∏è Database connectivity check failed (HTTP $http_code) - but continuing deployment"
          echo "This may be due to empty database or missing migrations"
        fi
        
    - name: Verify deployment status
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Verifying development deployment..."
        supabase status
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Successfully deployed to development!"
        echo "Project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
        echo "Deployment time: $(date)"
        echo "Commit: ${{ github.sha }}"
        echo "Supabase URL: ${{ secrets.SUPABASE_URL }}"
        
  deployment-failed:
    name: Development Deployment Failed
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "‚ùå Development deployment failed!"
        echo "Please check the logs and fix any issues before retrying."
        echo "Project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
        echo "Commit: ${{ github.sha }}"
        echo "Supabase URL: ${{ secrets.SUPABASE_URL }}"
        
    - name: Rollback guidance
      run: |
        echo "üîÑ Rollback guidance:"
        echo "1. Check Supabase dashboard for deployment status"
        echo "2. Review function logs for errors"
        echo "3. Verify environment variables are correctly set"
        echo "4. Check database migration status"
        echo "5. Manual rollback may be required via Supabase dashboard" 