name: Deploy to Development

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

jobs:
  deploy-develop:
    name: Deploy to Development
    runs-on: ubuntu-latest
    environment: develop
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Validate environment variables
      run: |
        echo "üîç Validating development environment variables..."
        
        # Check each secret directly
        if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_URL"
          exit 1
        else
          echo "‚úÖ SUPABASE_URL is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_SERVICE_ROLE_KEY"
          exit 1
        else
          echo "‚úÖ SUPABASE_SERVICE_ROLE_KEY is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_DEVELOP_PROJECT }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_DEVELOP_PROJECT"
          exit 1
        else
          echo "‚úÖ SUPABASE_DEVELOP_PROJECT is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_ACCESS_TOKEN }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_ACCESS_TOKEN"
          exit 1
        else
          echo "‚úÖ SUPABASE_ACCESS_TOKEN is set"
        fi
        
        echo "‚úÖ All required environment variables are set"
        
    - name: Link to development project
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Linking to development project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
        supabase link --project-ref ${{ secrets.SUPABASE_DEVELOP_PROJECT }}
        
    - name: Deploy database migrations
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      run: |
        cd supabase
        echo "Deploying database migrations to development..."
        
        # Set the database password for the connection
        export PGPASSWORD="${{ secrets.SUPABASE_DB_PASSWORD }}"
        
        echo "Attempting database migration deployment..."
        supabase db push
        
    - name: Deploy Edge Functions
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Deploying edge functions to development..."
        # Check if any functions exist to deploy
        if [ -d "functions" ] && [ "$(ls -A functions)" ]; then
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_DEVELOP_PROJECT }}
        else
          echo "‚ö†Ô∏è No functions to deploy - functions directory is empty"
        fi
        
    - name: Run health checks
      run: |
        echo "üè• Running health checks..."
        
        # Check if any functions exist before testing them
        if [ -d "supabase/functions" ] && [ "$(ls -A supabase/functions)" ]; then
          echo "Testing edge functions..."
          # List available functions for testing
          for func_dir in supabase/functions/*/; do
            if [ -d "$func_dir" ]; then
              func_name=$(basename "$func_dir")
              echo "Testing $func_name function..."
              response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/functions/v1/$func_name \
                -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}")
              
              http_code=$(echo "$response" | tail -n1)
              if [ "$http_code" = "200" ]; then
                echo "‚úÖ $func_name function is healthy"
              else
                echo "‚ùå $func_name function health check failed (HTTP $http_code)"
                exit 1
              fi
            fi
          done
        else
          echo "‚ö†Ô∏è No functions to test - functions directory is empty"
        fi
        
        # Test database connectivity (optional - may fail if migrations not run yet)
        echo "Testing database connectivity..."
        response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/rest/v1/users?select=count \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
          -H "Content-Type: application/json")
        
        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Database connectivity is healthy"
        elif [ "$http_code" = "401" ]; then
          echo "‚ö†Ô∏è Database connectivity check failed (HTTP 401) - likely due to empty database or missing migrations"
          echo "This is expected for a fresh development deployment"
        else
          echo "‚ö†Ô∏è Database connectivity check failed (HTTP $http_code) - but continuing deployment"
          echo "This may be due to empty database or missing migrations"
        fi
        
    - name: Verify deployment status
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        echo "Verifying development deployment..."
        
        # Check if we can access the Supabase API
        echo "Testing Supabase API connectivity..."
        response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/rest/v1/ \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
          -H "Content-Type: application/json")
        
        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Supabase API is accessible"
        else
          echo "‚ö†Ô∏è Supabase API connectivity check failed (HTTP $http_code)"
          echo "This may be normal for a fresh deployment"
        fi
        
        # Check migration status
        echo "Checking migration status..."
        cd supabase
        if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
          echo "‚úÖ Migrations directory contains files"
          ls -la migrations/
        else
          echo "‚ö†Ô∏è No migrations found"
        fi
        
        echo "‚úÖ Deployment verification complete"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Successfully deployed to development!"
        echo "Project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
        echo "Deployment time: $(date)"
        echo "Commit: ${{ github.sha }}"
        echo "Supabase URL: ${{ secrets.SUPABASE_URL }}"
        
  deployment-failed:
    name: Development Deployment Failed
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "‚ùå Development deployment failed!"
        echo "Please check the logs and fix any issues before retrying."
        echo "Project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
        echo "Commit: ${{ github.sha }}"
        echo "Supabase URL: ${{ secrets.SUPABASE_URL }}"
        
    - name: Rollback guidance
      run: |
        echo "üîÑ Rollback guidance:"
        echo "1. Check Supabase dashboard for deployment status"
        echo "2. Review function logs for errors"
        echo "3. Verify environment variables are correctly set"
        echo "4. Check database migration status"
        echo "5. Manual rollback may be required via Supabase dashboard" 