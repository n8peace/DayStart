name: Deploy to Development

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

jobs:
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    environment: develop
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Validate environment variables
      run: |
        echo "🔍 Validating development environment variables..."
        
        # Check each secret directly
        if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
          echo "❌ Missing required environment variable: SUPABASE_URL"
          exit 1
        else
          echo "✅ SUPABASE_URL is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
          echo "❌ Missing required environment variable: SUPABASE_SERVICE_ROLE_KEY"
          exit 1
        else
          echo "✅ SUPABASE_SERVICE_ROLE_KEY is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_DEVELOP_PROJECT }}" ]; then
          echo "❌ Missing required environment variable: SUPABASE_DEVELOP_PROJECT"
          exit 1
        else
          echo "✅ SUPABASE_DEVELOP_PROJECT is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_ACCESS_TOKEN }}" ]; then
          echo "❌ Missing required environment variable: SUPABASE_ACCESS_TOKEN"
          exit 1
        else
          echo "✅ SUPABASE_ACCESS_TOKEN is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_DB_PASSWORD }}" ]; then
          echo "❌ Missing required environment variable: SUPABASE_DB_PASSWORD"
          exit 1
        else
          echo "✅ SUPABASE_DB_PASSWORD is set"
        fi
        
        echo "✅ All required environment variables are set"
        
    - name: Link to development project
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Linking to development project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
        supabase link --project-ref ${{ secrets.SUPABASE_DEVELOP_PROJECT }}
        
    - name: Deploy database migrations
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      run: |
        cd supabase
        echo "Deploying database migrations to development..."
        export PGPASSWORD="${{ secrets.SUPABASE_DB_PASSWORD }}"
        echo "Attempting database migration deployment..."
        supabase db push
        
    - name: Remove Legacy Functions
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Removing legacy functions..."
        # Remove legacy functions that are no longer needed
        supabase functions delete generate-message --project-ref ${{ secrets.SUPABASE_DEVELOP_PROJECT }} || echo "generate-message not found or already removed"
        supabase functions delete test-voice --project-ref ${{ secrets.SUPABASE_DEVELOP_PROJECT }} || echo "test-voice not found or already removed"
        echo "Legacy function removal complete"
        
    - name: Deploy Edge Functions
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "🚀 Deploying edge functions to development..."
        echo "Current directory: $(pwd)"
        echo "Git commit hash: $(git rev-parse HEAD)"
        echo "Git branch: $(git branch --show-current)"
        echo "Functions directory contents:"
        ls -la functions/ || echo "Functions directory not found"
        
        # Check if any functions exist to deploy
        if [ -d "functions" ] && [ "$(ls -A functions)" ]; then
          echo "Found functions, deploying individually..."
          
          # Deploy each function individually
          for func_dir in functions/*/; do
            if [ -d "$func_dir" ]; then
              func_name=$(basename "$func_dir")
              if [ "$func_name" = "shared" ]; then
                echo "⏭️ Skipping shared directory (not a function)"
                continue
              fi
              echo "🚀 Deploying function: $func_name"
              echo "📁 Function directory: $func_dir"
              echo "📄 Function files:"
              ls -la "$func_dir"
              
              # Force delete and redeploy to clear any caching
              echo "🗑️ Force deleting function first..."
              supabase functions delete $func_name --project-ref ${{ secrets.SUPABASE_DEVELOP_PROJECT }} || echo "Function not found or already deleted"
              
              # Deploy with verbose output
              echo "🚀 Deploying fresh copy of function: $func_name"
              supabase functions deploy $func_name --project-ref ${{ secrets.SUPABASE_DEVELOP_PROJECT }} --debug || {
                echo "❌ Failed to deploy function: $func_name"
                echo "🔍 Checking function status..."
                supabase functions list --project-ref ${{ secrets.SUPABASE_DEVELOP_PROJECT }} || echo "Could not list functions"
                exit 1
              }
              echo "✅ Successfully deployed function: $func_name"
            fi
          done
          
          echo "✅ All function deployments completed"
          
          # List deployed functions
          echo "📋 Deployed functions:"
          supabase functions list --project-ref ${{ secrets.SUPABASE_DEVELOP_PROJECT }} || echo "Could not list functions"
        else
          echo "⚠️ No functions to deploy - functions directory is empty"
        fi
        
    - name: Run health checks
      run: |
        echo "🏥 Running health checks..."
        
        # Check if any functions exist before testing them
        if [ -d "supabase/functions" ] && [ "$(ls -A supabase/functions)" ]; then
          echo "Testing edge functions in parallel..."
          
          # Create a temporary file to store function names
          temp_file=$(mktemp)
          
          # Collect all function names (skip shared directory)
          for func_dir in supabase/functions/*/; do
            if [ -d "$func_dir" ]; then
              func_name=$(basename "$func_dir")
              if [ "$func_name" = "shared" ]; then
                echo "⏭️ Skipping shared directory (not a function)"
                continue
              fi
              echo "$func_name" >> "$temp_file"
            fi
          done
          
          # Function to test a single function
          test_function() {
            local func_name=$1
            echo "Testing $func_name function..."
            
            # Add timeout to curl to prevent hanging
            response=$(timeout 30 curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/functions/v1/$func_name \
              -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}")
            
            http_code=$(echo "$response" | tail -n1)
            if [ "$http_code" = "200" ]; then
              echo "✅ $func_name function is healthy"
              return 0
            elif [ "$func_name" = "generate-weather-content" ] && [ "$http_code" = "400" ]; then
              echo "✅ $func_name function is healthy (no weather data available - expected)"
              return 0
            else
              echo "❌ $func_name function health check failed (HTTP $http_code)"
              return 1
            fi
          }
          
          # Export the function and variables for parallel execution
          export -f test_function
          export SUPABASE_URL="${{ secrets.SUPABASE_URL }}"
          export SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          
          # Run health checks in parallel with a maximum of 5 concurrent jobs
          if command -v parallel >/dev/null 2>&1; then
            # Use GNU parallel if available
            parallel -j 5 test_function ::: $(cat "$temp_file")
            parallel_status=$?
          else
            # Fallback to background jobs with wait
            pids=()
            while IFS= read -r func_name; do
              test_function "$func_name" &
              pids+=($!)
            done < "$temp_file"
            
            # Wait for all background jobs to complete
            parallel_status=0
            for pid in "${pids[@]}"; do
              if ! wait "$pid"; then
                parallel_status=1
              fi
            done
          fi
          
          # Clean up
          rm -f "$temp_file"
          
          # Exit with the status from parallel execution
          if [ $parallel_status -ne 0 ]; then
            echo "❌ One or more health checks failed"
            exit 1
          fi
          
          echo "✅ All function health checks completed"
        else
          echo "⚠️ No functions to test - functions directory is empty"
        fi
        echo "Testing database connectivity..."
        response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/rest/v1/users?select=count \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
          -H "Content-Type: application/json")
        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" = "200" ]; then
          echo "✅ Database connectivity is healthy"
        elif [ "$http_code" = "401" ]; then
          echo "⚠️ Database connectivity check failed (HTTP 401) - likely due to empty database or missing migrations"
          echo "This is expected for a fresh development deployment"
        else
          echo "⚠️ Database connectivity check failed (HTTP $http_code) - but continuing deployment"
          echo "This may be due to empty database or missing migrations"
        fi
        
    - name: Verify deployment status
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        echo "Verifying development deployment..."
        echo "Testing Supabase API connectivity..."
        response=$(curl -s -w "\n%{http_code}" -X GET ${{ secrets.SUPABASE_URL }}/rest/v1/ \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
          -H "Content-Type: application/json")
        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" = "200" ]; then
          echo "✅ Supabase API is accessible"
        else
          echo "⚠️ Supabase API connectivity check failed (HTTP $http_code)"
          echo "This may be normal for a fresh deployment"
        fi
        echo "Checking migration status..."
        cd supabase
        if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
          echo "✅ Migrations directory contains files"
          ls -la migrations/
        else
          echo "⚠️ No migrations found"
        fi
        echo "✅ Deployment verification complete"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "🎉 Successfully deployed to development!"
        echo "Project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
        echo "Deployment time: $(date)"
        echo "Commit: ${{ github.sha }}"
        echo "Supabase URL: ${{ secrets.SUPABASE_URL }}"
        
  deployment-failed:
    name: Development Deployment Failed
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "❌ Development deployment failed!"
        echo "Please check the logs and fix any issues before retrying."
        echo "Project: ${{ secrets.SUPABASE_DEVELOP_PROJECT }}"
        echo "Commit: ${{ github.sha }}"
        echo "Supabase URL: ${{ secrets.SUPABASE_URL }}"
        
    - name: Rollback guidance
      run: |
        echo "🔄 Rollback guidance:"
        echo "1. Check Supabase dashboard for deployment status"
        echo "2. Review function logs for errors"
        echo "3. Verify environment variables are correctly set"
        echo "4. Check database migration status"
        echo "5. Manual rollback may be required via Supabase dashboard" 