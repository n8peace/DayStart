name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
      confirm_deployment:
        description: 'Confirm you want to deploy to production'
        required: true
        type: boolean
        default: false

env:
  SUPABASE_MAIN_PROJECT: ${{ secrets.SUPABASE_MAIN_PROJECT }}

jobs:
  validate-deployment:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.confirm_deployment == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate branch
      run: |
        if [ "${{ github.ref }}" != "refs/heads/main" ]; then
          echo "‚ùå Production deployments can only be triggered from main branch"
          exit 1
        fi
        echo "‚úÖ Branch validation passed"
        
    - name: Check for uncommitted changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "‚ùå Working directory is not clean"
          git status
          exit 1
        fi
        echo "‚úÖ Working directory is clean"
        
    - name: Validate environment
      run: |
        if [ "${{ github.event.inputs.environment }}" != "production" ]; then
          echo "‚ùå Only production deployments are supported"
          exit 1
        fi
        echo "‚úÖ Environment validation passed"
        
  deploy-production-auto:
    name: Deploy to Production (Auto)
    runs-on: ubuntu-latest
    environment: main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Validate environment variables
      run: |
        echo "üîç Validating production environment variables..."
        
        # Check each secret directly
        if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_URL"
          exit 1
        else
          echo "‚úÖ SUPABASE_URL is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_SERVICE_ROLE_KEY"
          exit 1
        else
          echo "‚úÖ SUPABASE_SERVICE_ROLE_KEY is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_MAIN_PROJECT }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_MAIN_PROJECT"
          exit 1
        else
          echo "‚úÖ SUPABASE_MAIN_PROJECT is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_ACCESS_TOKEN }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_ACCESS_TOKEN"
          exit 1
        else
          echo "‚úÖ SUPABASE_ACCESS_TOKEN is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_MAIN_DB_URL }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_MAIN_DB_URL"
          exit 1
        else
          echo "‚úÖ SUPABASE_MAIN_DB_URL is set"
        fi
        
        echo "‚úÖ All required environment variables are set"
        
    - name: Link to production project
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Linking to production project: ${{ env.SUPABASE_MAIN_PROJECT }}"
        supabase link --project-ref ${{ env.SUPABASE_MAIN_PROJECT }}
        
    - name: Deploy database migrations
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        PGPASSWORD: ${{ secrets.SUPABASE_MAIN_DB_URL }}
      run: |
        cd supabase
        echo "Deploying database migrations..."
        supabase db push
        
    - name: Deploy Edge Functions
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Deploying edge functions..."
        if [ -d "functions" ] && [ "$(ls -A functions)" ]; then
          supabase functions deploy
        else
          echo "No functions to deploy"
        fi
        
    - name: Verify deployment
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      run: |
        echo "üîç Verifying production deployment..."
        
        # Check if users table exists via API
        echo "Checking database connectivity..."
        response=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
          -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
          "$SUPABASE_URL/rest/v1/users?select=count")
        
        if [ "$response" = "200" ]; then
          echo "‚úÖ Database connectivity verified"
        else
          echo "‚ö†Ô∏è Database connectivity check failed (HTTP $response)"
          echo "This may be normal if the users table doesn't exist yet"
        fi
        
        # Check migration files
        echo "Checking migration files..."
        if [ -d "supabase/migrations" ] && [ "$(ls -A supabase/migrations)" ]; then
          echo "‚úÖ Migration files found"
          ls -la supabase/migrations/
        else
          echo "‚ö†Ô∏è No migration files found"
        fi
        
        echo "‚úÖ Production deployment verification complete"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Successfully deployed to production!"
        echo "Project: ${{ env.SUPABASE_MAIN_PROJECT }}"
        echo "Deployment time: $(date)"
        echo "Commit: ${{ github.sha }}"
        echo "Supabase URL: ${{ secrets.SUPABASE_URL }}"
        
  deploy-production-manual:
    name: Deploy to Production (Manual)
    runs-on: ubuntu-latest
    environment: main
    needs: validate-deployment
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.confirm_deployment == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Validate environment variables
      run: |
        echo "üîç Validating production environment variables..."
        
        # Check each secret directly
        if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_URL"
          exit 1
        else
          echo "‚úÖ SUPABASE_URL is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_SERVICE_ROLE_KEY"
          exit 1
        else
          echo "‚úÖ SUPABASE_SERVICE_ROLE_KEY is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_MAIN_PROJECT }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_MAIN_PROJECT"
          exit 1
        else
          echo "‚úÖ SUPABASE_MAIN_PROJECT is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_ACCESS_TOKEN }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_ACCESS_TOKEN"
          exit 1
        else
          echo "‚úÖ SUPABASE_ACCESS_TOKEN is set"
        fi
        
        if [ -z "${{ secrets.SUPABASE_MAIN_DB_URL }}" ]; then
          echo "‚ùå Missing required environment variable: SUPABASE_MAIN_DB_URL"
          exit 1
        else
          echo "‚úÖ SUPABASE_MAIN_DB_URL is set"
        fi
        
        echo "‚úÖ All required environment variables are set"
        
    - name: Link to production project
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Linking to production project: ${{ env.SUPABASE_MAIN_PROJECT }}"
        supabase link --project-ref ${{ env.SUPABASE_MAIN_PROJECT }}
        
    - name: Deploy database migrations
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        PGPASSWORD: ${{ secrets.SUPABASE_MAIN_DB_URL }}
      run: |
        cd supabase
        echo "Deploying database migrations..."
        supabase db push
        
    - name: Deploy Edge Functions
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Deploying edge functions..."
        if [ -d "functions" ] && [ "$(ls -A functions)" ]; then
          supabase functions deploy
        else
          echo "No functions to deploy"
        fi
        
    - name: Verify deployment
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      run: |
        echo "üîç Verifying production deployment..."
        
        # Check if users table exists via API
        echo "Checking database connectivity..."
        response=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
          -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
          "$SUPABASE_URL/rest/v1/users?select=count")
        
        if [ "$response" = "200" ]; then
          echo "‚úÖ Database connectivity verified"
        else
          echo "‚ö†Ô∏è Database connectivity check failed (HTTP $response)"
          echo "This may be normal if the users table doesn't exist yet"
        fi
        
        # Check migration files
        echo "Checking migration files..."
        if [ -d "supabase/migrations" ] && [ "$(ls -A supabase/migrations)" ]; then
          echo "‚úÖ Migration files found"
          ls -la supabase/migrations/
        else
          echo "‚ö†Ô∏è No migration files found"
        fi
        
        echo "‚úÖ Production deployment verification complete"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Successfully deployed to production!"
        echo "Project: ${{ env.SUPABASE_MAIN_PROJECT }}"
        echo "Deployment time: $(date)"
        echo "Commit: ${{ github.sha }}"
        echo "Supabase URL: ${{ secrets.SUPABASE_URL }}"
        
  deployment-failed:
    name: Production Deployment Failed
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "‚ùå Production deployment failed!"
        echo "Please check the logs and fix any issues before retrying."
        echo "Project: ${{ env.SUPABASE_MAIN_PROJECT }}"
        echo "Commit: ${{ github.sha }}"
        echo "Supabase URL: ${{ secrets.SUPABASE_URL }}"
        
    - name: Rollback guidance
      run: |
        echo "üîÑ Rollback guidance:"
        echo "1. Check Supabase dashboard for deployment status"
        echo "2. Review function logs for errors"
        echo "3. Verify environment variables are correctly set"
        echo "4. Check database migration status"
        echo "5. Manual rollback may be required via Supabase dashboard"
