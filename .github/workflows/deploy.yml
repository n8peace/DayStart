name: Manual Production Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
      confirm_deployment:
        description: 'Confirm you want to deploy to production'
        required: true
        type: boolean
        default: false

env:
  SUPABASE_MAIN_PROJECT: ${{ secrets.SUPABASE_MAIN_PROJECT }}

jobs:
  validate-deployment:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_deployment == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate branch
      run: |
        if [ "${{ github.ref }}" != "refs/heads/main" ]; then
          echo "‚ùå Production deployments can only be triggered from main branch"
          exit 1
        fi
        echo "‚úÖ Branch validation passed"
        
    - name: Check for uncommitted changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "‚ùå Working directory is not clean"
          git status
          exit 1
        fi
        echo "‚úÖ Working directory is clean"
        
    - name: Validate environment
      run: |
        if [ "${{ github.event.inputs.environment }}" != "production" ]; then
          echo "‚ùå Only production deployments are supported"
          exit 1
        fi
        echo "‚úÖ Environment validation passed"
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate-deployment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
      
    - name: Deploy Database Migrations
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Linking to production project: ${{ env.SUPABASE_MAIN_PROJECT }}"
        supabase link --project-ref ${{ env.SUPABASE_MAIN_PROJECT }}
        echo "Deploying database migrations..."
        supabase db push --db-url ${{ secrets.SUPABASE_MAIN_DB_URL }}
        
    - name: Deploy Edge Functions
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Deploying edge functions..."
        supabase functions deploy
        
    - name: Verify Deployment
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        echo "Verifying deployment..."
        supabase status
        
    - name: Notify Deployment Success
      run: |
        echo "üéâ Successfully deployed to production!"
        echo "Project: ${{ env.SUPABASE_MAIN_PROJECT }}"
        echo "Deployment time: $(date)"
        echo "Commit: ${{ github.sha }}"
        
  deployment-failed:
    name: Deployment Failed
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Notify Failure
      run: |
        echo "‚ùå Production deployment failed!"
        echo "Please check the logs and fix any issues before retrying."
        echo "Project: ${{ env.SUPABASE_MAIN_PROJECT }}"
        echo "Commit: ${{ github.sha }}"
